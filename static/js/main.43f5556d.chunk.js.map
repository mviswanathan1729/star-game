{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","StarsDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","timeLimit","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","StarMatch","gameId","setGameId","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43f5556d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst StarsDisplay = props => (\n  <>\n    {utils.range(1, props.count).map(starId => (\n      <div key={starId} className=\"star\" />\n    ))}\n  </>\n);\n\nconst PlayNumber = props => (\n  <button\n    className=\"number\"\n    style={{ backgroundColor: colors[props.status] }}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n  <div className=\"game-done\">\n    <div\n      className=\"message\"\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\n    >\n      {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n);\n\nconst useGameState = timeLimit => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const setGameState = (newCandidateNums) => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\n};\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0\n    ? 'won'\n    : secondsLeft === 0 ? 'lost' : 'active'\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used' || secondsLeft === 0) {\n      return;\n    }\n\n    const newCandidateNums =\n      currentStatus === 'available'\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\n          ) : (\n              <StarsDisplay count={stars} />\n            )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => (\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              number={number}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n  const [gameId, setGameId] = useState(1);\n  return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\n\nfunction App() {\n  return (\n    <StarMatch />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}